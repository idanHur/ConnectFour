#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameLogicClient.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClientConnect4")]
	public partial class ClientDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertMove(Move instance);
    partial void UpdateMove(Move instance);
    partial void DeleteMove(Move instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    #endregion
		
		public ClientDataContextDataContext() : 
				base(global::GameLogicClient.Properties.Settings.Default.ClientConnect4ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ClientDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClientDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClientDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClientDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Move> Moves
		{
			get
			{
				return this.GetTable<Move>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _gameId;
		
		private string _board;
		
		private System.Nullable<int> _gameStatus;
		
		private System.Nullable<int> _playerId;
		
		private EntitySet<Move> _Moves;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngameIdChanging(int value);
    partial void OngameIdChanged();
    partial void OnboardChanging(string value);
    partial void OnboardChanged();
    partial void OngameStatusChanging(System.Nullable<int> value);
    partial void OngameStatusChanged();
    partial void OnplayerIdChanging(System.Nullable<int> value);
    partial void OnplayerIdChanged();
    #endregion
		
		public Game()
		{
			this._Moves = new EntitySet<Move>(new Action<Move>(this.attach_Moves), new Action<Move>(this.detach_Moves));
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int gameId
		{
			get
			{
				return this._gameId;
			}
			set
			{
				if ((this._gameId != value))
				{
					this.OngameIdChanging(value);
					this.SendPropertyChanging();
					this._gameId = value;
					this.SendPropertyChanged("gameId");
					this.OngameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_board", DbType="NVarChar(MAX)")]
		public string board
		{
			get
			{
				return this._board;
			}
			set
			{
				if ((this._board != value))
				{
					this.OnboardChanging(value);
					this.SendPropertyChanging();
					this._board = value;
					this.SendPropertyChanged("board");
					this.OnboardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameStatus", DbType="Int")]
		public System.Nullable<int> gameStatus
		{
			get
			{
				return this._gameStatus;
			}
			set
			{
				if ((this._gameStatus != value))
				{
					this.OngameStatusChanging(value);
					this.SendPropertyChanging();
					this._gameStatus = value;
					this.SendPropertyChanged("gameStatus");
					this.OngameStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerId", DbType="Int")]
		public System.Nullable<int> playerId
		{
			get
			{
				return this._playerId;
			}
			set
			{
				if ((this._playerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerIdChanging(value);
					this.SendPropertyChanging();
					this._playerId = value;
					this.SendPropertyChanged("playerId");
					this.OnplayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Move", Storage="_Moves", ThisKey="gameId", OtherKey="gameId")]
		public EntitySet<Move> Moves
		{
			get
			{
				return this._Moves;
			}
			set
			{
				this._Moves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Player", ThisKey="playerId", OtherKey="playerId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._playerId = value.playerId;
					}
					else
					{
						this._playerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Moves(Move entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Moves(Move entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Move")]
	public partial class Move : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _columnNumber;
		
		private System.Nullable<int> _Player;
		
		private System.Nullable<int> _gameId;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncolumnNumberChanging(System.Nullable<int> value);
    partial void OncolumnNumberChanged();
    partial void OnPlayerChanging(System.Nullable<int> value);
    partial void OnPlayerChanged();
    partial void OngameIdChanging(System.Nullable<int> value);
    partial void OngameIdChanged();
    #endregion
		
		public Move()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_columnNumber", DbType="Int")]
		public System.Nullable<int> columnNumber
		{
			get
			{
				return this._columnNumber;
			}
			set
			{
				if ((this._columnNumber != value))
				{
					this.OncolumnNumberChanging(value);
					this.SendPropertyChanging();
					this._columnNumber = value;
					this.SendPropertyChanged("columnNumber");
					this.OncolumnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="Int")]
		public System.Nullable<int> Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameId", DbType="Int")]
		public System.Nullable<int> gameId
		{
			get
			{
				return this._gameId;
			}
			set
			{
				if ((this._gameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngameIdChanging(value);
					this.SendPropertyChanging();
					this._gameId = value;
					this.SendPropertyChanged("gameId");
					this.OngameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Move", Storage="_Game", ThisKey="gameId", OtherKey="gameId", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Moves.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Moves.Add(this);
						this._gameId = value.gameId;
					}
					else
					{
						this._gameId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerId;
		
		private string _playerName;
		
		private string _phoneNumber;
		
		private string _country;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerIdChanging(int value);
    partial void OnplayerIdChanged();
    partial void OnplayerNameChanging(string value);
    partial void OnplayerNameChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    #endregion
		
		public Player()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int playerId
		{
			get
			{
				return this._playerId;
			}
			set
			{
				if ((this._playerId != value))
				{
					this.OnplayerIdChanging(value);
					this.SendPropertyChanging();
					this._playerId = value;
					this.SendPropertyChanged("playerId");
					this.OnplayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerName", DbType="NVarChar(100)")]
		public string playerName
		{
			get
			{
				return this._playerName;
			}
			set
			{
				if ((this._playerName != value))
				{
					this.OnplayerNameChanging(value);
					this.SendPropertyChanging();
					this._playerName = value;
					this.SendPropertyChanged("playerName");
					this.OnplayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="NVarChar(15)")]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Games", ThisKey="playerId", OtherKey="playerId")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
}
#pragma warning restore 1591
